# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: default

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'      
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true
        additionalArguments: '/updateprojectfiles'
    - name: Install Dotnet-Coverage
      run: dotnet tool install --global dotnet-coverage
    - name: Restore Dependencies
      run: dotnet restore
    - name: Build Solution
      run: dotnet build --no-restore
    - name: Test Solution
      run: dotnet test --no-build --collect:"Code Coverage" /p:CoverletOutputFormat=opencover
    - name: Code Coverage
      run: dotnet-coverage collect dotnet test --no-build -f xml  -o 'coverage.xml'
    - name: Pack Nuget
      run: dotnet pack --no-build --configuration Debug --output .
    - name: Push Nuget
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/M2MP/index.json --skip-duplicate
    - name: Upload Artifacts (net48)
      uses: actions/upload-artifact@v3
      with:
        name: Assemblies (net48)
        path: CDM/Models/bin/Debug/net48
    - name: Run ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5
      with:
        reports: 'coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'Badges;HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
    - name: Publish to GitHub Pages
#      if: ${{ github.ref == 'refs/heads/master' }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: coveragereport
    - name: Upload Artifacts (net7.0)
      uses: actions/upload-artifact@v3
      with:
        name: Assemblies (net7.0)
        path: CDM/Models/bin/Debug/net7.0        
    - name: Upload Coverage Report artifact
      uses: actions/upload-artifact@v3
      with:
        name: Code Coverage Report # Artifact name        
        path: coveragereport # Directory containing files to upload
  
  deploy:
      needs: build
      runs-on: biztalk2020-dev-richard
      steps:
       - name: Download Artifact (net48)
         uses: actions/download-artifact@v3
         with:
           name: Assemblies (net48)
       - name: Deploy to Global Assembly Cache (GAC)
         shell: pwsh
         run: | 
           Install-Module -Name GAC -Scope CurrentUser -Force
           Get-ChildItem *.dll | ForEach-Object { Add-GacAssembly -LiteralPath $_ -Verbose} # verbose for now, to see what's gac'ed
           
